import { Component, Host, h, Prop, Element } from '@stencil/core';

@Component({
  tag: 'codepen-link',
  styleUrl: 'codepen-link.scss',
})
export class CodepenLink {
  @Element() el: HTMLElement;

  /**
   * JSON options defined here:
   * https://blog.codepen.io/documentation/prefill/
   */
  /**
   * Title of new pen
   */
  @Prop() penTitle?: string = 'New Pen';

  /**
   * Description of new pen
   */
  @Prop() description?: string = '';

  /**
   * When the Pen is saved, it will save as Private if logged in user has that privledge, otherwise it will save as public
   */
  @Prop() isPrivate?: boolean = false;

  /**
   * If supplied, the Pen will save as a fork of this id. Note it's not the slug, but ID. You can find the ID of a Pen with `window.CP.pen.id` in the browser console.
   */
  @Prop() parent?: string = '';

  /**
   * an array of strings
   */
  @Prop() tags?: Array<string> = [];

  /**
   * Set which editors are open. In this example HTML open, CSS closed, JS open
   */
  @Prop() editors?: string = '111';

  /**
   * Layout of the new pen
   */
  @Prop() layout?: 'top' | 'left' | 'right' = 'top';

  /**
   * HTML code
   */
  @Prop() html?: string = '<p>Generated by &lt;codepen-link&gt;</p>';

  /**
   * HTML preprocessor
   */
  @Prop() htmlPreProcessor?: 'none' | 'slim' | 'haml' | 'markdown' = 'none';

  /**
   * CSS code
   */
  @Prop() css?: string = '';

  /**
   * CSS preprocessor
   */
  @Prop() cssPreProcessor?: 'none' | 'less' | 'scss' | 'sass' | 'stylus' = 'none';

  /**
   * CSS reset or normalisation
   */
  @Prop() cssStarter?: 'normalize' | 'reset' | 'neither' = 'neither';

  /**
   * CSS prefix
   */
  @Prop() cssPrefix?: 'autoprefixer' | 'prefixfree' | 'neither' = 'neither';

  /**
   * JavaScript code
   */
  @Prop() js?: string = '';

  /**
   * JavaScript preprocessor
   */
  @Prop() jsPreProcessor?: 'none' | 'coffeescript' | 'babel' | 'livescript' | 'typescript' = 'none';

  /**
   * HTML classes
   */
  @Prop() htmlClasses?: string = '';

  /**
   * Code that should go inside <head></head>
   */
  @Prop() head?: string = '';

  /**
   * semi-colon separate multiple files
   */
  @Prop() cssExternal?: string = '';

  /**
   * semi-colon separate multiple files
   */
  @Prop() jsExternal?: string = '';

  private submit() {
    const form = this.el.querySelector('form');
    form.submit();
  }

  render() {
    const {
      penTitle: title,
      description,
      isPrivate,
      parent,
      tags,
      editors,
      layout,
      html,
      css,
      cssStarter: css_starter,
      cssPrefix: css_prefix,
      cssPreProcessor: css_pre_processor,
      js,
      jsPreProcessor: js_pre_processor,
      htmlClasses: html_classes,
      htmlPreProcessor: html_pre_processor,
      head,
      cssExternal: css_external,
      jsExternal: js_external,
    } = this;

    const data = JSON.stringify({
      title,
      description,
      isPrivate,
      parent,
      tags,
      editors,
      layout,
      html,
      css,
      css_starter,
      css_prefix,
      css_pre_processor,
      js,
      js_pre_processor,
      html_classes,
      html_pre_processor,
      head,
      css_external,
      js_external,
    });

    return (
      <Host>
        <form action="https://codepen.io/pen/define" method="POST" target="_blank">
          <input type="hidden" name="data" value={data} />

          <div class="submit-wrapper" onClick={() => this.submit()}>
            <slot></slot>
          </div>
        </form>
      </Host>
    );
  }
}
